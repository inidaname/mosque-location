// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mosque.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MosqueService_CreateMosque_FullMethodName = "/mosque.MosqueService/CreateMosque"
	MosqueService_ListMosques_FullMethodName  = "/mosque.MosqueService/ListMosques"
	MosqueService_UpdateMosque_FullMethodName = "/mosque.MosqueService/UpdateMosque"
)

// MosqueServiceClient is the client API for MosqueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MosqueServiceClient interface {
	CreateMosque(ctx context.Context, in *CreateMosqueRequest, opts ...grpc.CallOption) (*CreateMosqueResponse, error)
	ListMosques(ctx context.Context, in *ListMosquesRequest, opts ...grpc.CallOption) (*ListMosquesResponse, error)
	UpdateMosque(ctx context.Context, in *UpdateMosqueRequest, opts ...grpc.CallOption) (*UpdateMosqueResponse, error)
}

type mosqueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMosqueServiceClient(cc grpc.ClientConnInterface) MosqueServiceClient {
	return &mosqueServiceClient{cc}
}

func (c *mosqueServiceClient) CreateMosque(ctx context.Context, in *CreateMosqueRequest, opts ...grpc.CallOption) (*CreateMosqueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMosqueResponse)
	err := c.cc.Invoke(ctx, MosqueService_CreateMosque_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mosqueServiceClient) ListMosques(ctx context.Context, in *ListMosquesRequest, opts ...grpc.CallOption) (*ListMosquesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMosquesResponse)
	err := c.cc.Invoke(ctx, MosqueService_ListMosques_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mosqueServiceClient) UpdateMosque(ctx context.Context, in *UpdateMosqueRequest, opts ...grpc.CallOption) (*UpdateMosqueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMosqueResponse)
	err := c.cc.Invoke(ctx, MosqueService_UpdateMosque_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MosqueServiceServer is the server API for MosqueService service.
// All implementations must embed UnimplementedMosqueServiceServer
// for forward compatibility.
type MosqueServiceServer interface {
	CreateMosque(context.Context, *CreateMosqueRequest) (*CreateMosqueResponse, error)
	ListMosques(context.Context, *ListMosquesRequest) (*ListMosquesResponse, error)
	UpdateMosque(context.Context, *UpdateMosqueRequest) (*UpdateMosqueResponse, error)
	mustEmbedUnimplementedMosqueServiceServer()
}

// UnimplementedMosqueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMosqueServiceServer struct{}

func (UnimplementedMosqueServiceServer) CreateMosque(context.Context, *CreateMosqueRequest) (*CreateMosqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMosque not implemented")
}
func (UnimplementedMosqueServiceServer) ListMosques(context.Context, *ListMosquesRequest) (*ListMosquesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMosques not implemented")
}
func (UnimplementedMosqueServiceServer) UpdateMosque(context.Context, *UpdateMosqueRequest) (*UpdateMosqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMosque not implemented")
}
func (UnimplementedMosqueServiceServer) mustEmbedUnimplementedMosqueServiceServer() {}
func (UnimplementedMosqueServiceServer) testEmbeddedByValue()                       {}

// UnsafeMosqueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MosqueServiceServer will
// result in compilation errors.
type UnsafeMosqueServiceServer interface {
	mustEmbedUnimplementedMosqueServiceServer()
}

func RegisterMosqueServiceServer(s grpc.ServiceRegistrar, srv MosqueServiceServer) {
	// If the following call pancis, it indicates UnimplementedMosqueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MosqueService_ServiceDesc, srv)
}

func _MosqueService_CreateMosque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMosqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MosqueServiceServer).CreateMosque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MosqueService_CreateMosque_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MosqueServiceServer).CreateMosque(ctx, req.(*CreateMosqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MosqueService_ListMosques_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMosquesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MosqueServiceServer).ListMosques(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MosqueService_ListMosques_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MosqueServiceServer).ListMosques(ctx, req.(*ListMosquesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MosqueService_UpdateMosque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMosqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MosqueServiceServer).UpdateMosque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MosqueService_UpdateMosque_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MosqueServiceServer).UpdateMosque(ctx, req.(*UpdateMosqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MosqueService_ServiceDesc is the grpc.ServiceDesc for MosqueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MosqueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mosque.MosqueService",
	HandlerType: (*MosqueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMosque",
			Handler:    _MosqueService_CreateMosque_Handler,
		},
		{
			MethodName: "ListMosques",
			Handler:    _MosqueService_ListMosques_Handler,
		},
		{
			MethodName: "UpdateMosque",
			Handler:    _MosqueService_UpdateMosque_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mosque.proto",
}
